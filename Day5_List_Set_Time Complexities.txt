Time Complexity: 
	Amount of Time taken by the algorithm to execute the task.
	First we always go with Worst Case Time Complexity.
	Then, go on optimize it.
List: List allows duplicate values in it
	Example: 
	nums = [1, 3, 2, 5, 2]
	print(nums)        // [1, 3, 2, 5, 2]
	nums.append(6)	   // [1, 3, 2, 5, 2, 6]
	nums.remove(2)     // [1, 3, 5, 2, 6]  <-- here remove(2) will only remove first occurence of 2 in a list
	nums.pop()         // [1, 3, 5, 2]
	nums.pop(1)	   // [1, 5, 2]       <-- here it removes index value

	Method       Time Complexity
	search      	O(n)    <-- list allow duplicate values
	append		O(1)
	remove		O(n)
	pop		O(1)
	pop(index) 	O(1)

Set: Set doesn't allow duplicate value in it
	Example:
	nums = {1, 2, 2}
	print(nums)	// {1, 2}
	nums.add(7)	// {1, 2, 7}
	nums.remove(1)	// {2, 7}

	Method       Time Complexity

	search      	O(1) <-- beacause of set doesn't allow duplicates
	add		O(1) 
	remove		O(1) <-- beacause of hashing
	pop		O(1)
	pop(index) 	O(1)

LeeetCode Problem: 26. Remove Duplicates from Sorted Array
Solution: 
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        low = 0
        while low<len(nums)-1:
            if nums[low]==nums[low+1]:
                nums.remove(nums[low+1])
            else:
                low = low+1
        return len(nums)

Input:[1, 1, 2]

Output: [1, 2]
	