PEP8:
	Python Enhanced Proposal 8
	It is like a documentation, which is available to the developers. It has set of instructions that the code has to follow.
	It is all about: 
		How to declare/create a Variable
		How to give indentation inside a python file
		While writing functions how to declare them
		If we want to contirbute to the python community, How to maintain the code structure. So, that it is easy to understand for everyone.
			
Operators:
	1. Arithmetic Operators

	addition	print(1+2)     // 3
	subtraction	print(3-2)     // 1
	multiplication	print(2*3)     // 6
	divison		print(3/2)     // 1.5 <-- it gives floating point number
	floor division	print(3//2)    // 1   <-- floor division will give integer value
	modulus		print(3%2)     // 1
	adding floats	print(0.3+0.6) // 0.899999999999 <-- this is because of python
	
	2. Comparision Operators

	print(3>2)	// True
	print((3<2)	// False
	print(2==3)	// False 
	
	Assigning a Value to the variable has two types
		Using Assignment Operator:
			We use equal(=) sign here to assign a value to teh variable
			a = 10
			print(a)	// 10	
		Using Walrus Operator:
			Which allow us to declare a variable inside a print statement
			It's only valid in in-line statemenTS
			If we declare outside it will give us error
			
			print(a:= 20)	// 20
If Elif Else:
	Conditional Statement which allows us to check for the condition based True or False, then gives us the corresponding result
	Code: 
		num = 10
		if num == 10:		// here this case is True. So, it prints 10 as a result.
	    	    print(10)
		elif num == 20:
	    	    print(20)
		else:
	    	    print("neither 10 nor 20")
	
Loops: We use loops when we want to iterate on every item in an array of items.
	
	For Loop: it is to repeatedly execute a group of statements as long as the condition is satisfied.

	Type 1:
	Code: numbers = [1, 2, 3, 4, 2]
		 			      <-- i represents in which index iteration starts
	      for i in range(len(numbers)):   <-- range represents how many number of times this loop has to iterate
					      <-- here, range() starts at 0 index by default and increments by 1 by default.
					      <-- len(numbers) represents lenght of items in a given array	
	    	    print(numbers[i])         <-- numbers[i] takes the index number and prints the value in it.
	Oupput: 
		1
		2
		3
		4

	Instead we can also specify range() like this

	     for i in range(0, len(numbers)-1): <-- here inside range() 0 represent starting index which is inclusive
		
		index values --->    0	      1        2               len(numbers)-1 represents ending index and which is exclusive 
		
		Example: words = ["hello", "world", "python"] 
			 for i in range(0, 2):     // index 0 is included, index 2 is excluded
			     print(words[i])
			Ouput: 
		       		world
		       		hello

		index values --->    0	      1        2                
		Example: words = ["hello", "world", "python"] 
			for i in range(len(words)):
			    print(i, words[i])
			Output:
				0 world
				1 hello
				2 python
	
	Type 2:
	Code: numbers = [1, 2, 3, 4, 2]
					<-- num represents value in given list
	      for num in numbers:	<-- numbers represent the list of items
	          print(num)		<-- it prints the values directly by each iteration.
	Output:
		1
	 	2
	 	3
	        4
		
	
LeetCode Problem:  1480. Running sum of 1d Array (Solved)
Solution:
class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
        newNums = [nums[0]]
        value = nums[0]
        for i in range(1, len(nums)):
            value = value + nums[i]
            newNums.append(value)
        return newNums

Input: nums = [1,2,3,4]

Output: [1,3,6,10]

Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].